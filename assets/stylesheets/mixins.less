//
//  STACK OVERFLOW
//  Mixins
//
//  -----------------------------------------------------------------------------
//  $   Clearfix
//  -----------------------------------------------------------------------------
.clearfix() {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after { clear: both; }
}


//  ===========================================================================
//  $   FLEXBOX
//      Oh boy. Here be dragons! These are mixins for complete flexbox support.
//      Use these mixins instead of writing out flexbox code in your CSS to
//      make sure we're as completely backward compatiable as possible.
//
//      These mixins support only the current browser versions plus the previous
//      version. Older browsers (e.g. IE10, IE9) are not supported. If you need
//      to provide this level of support, consult the following documents:
//
//      Flexbugs: A community-curated list of flexbox issues (mainly IE)
//      https://github.com/philipwalton/flexbugs
//
//      A Guide to Flexbox -- CSS-Tricks.com
//      https://css-tricks.com/snippets/css/a-guide-to-flexbox/
//      
//      Flexplorer -- A free Flexbox generator
//      http://bennettfeely.com/flexplorer/
//
//  ===========================================================================
//  --  FLEXBOX CONTAINER
//      Use this on the wrapping parent container on items you want to flex.
//  ---------------------------------------------------------------------------
.flexbox() {
  display: -webkit-flex;
  display: flex;
}

//  --  FLEX VALUES
//      If not set, the default is "1 0 auto". This is shorthand for flex-grow,
//      flex-shrink, and flex-basis combined. The second and third parameters
//      are optional. Per Chris Coyier on CSS-Tricks.com, it is recommended
//      that the shorthand is used over individual properties.
//
//      Note that in IE10, the default value is "0 0 auto".
//  ---------------------------------------------------------------------------
.flex(@values: 1 0 auto) {
    -webkit-flex: @values;
            flex: @values;
}

//  --  FLEX ORDER
//      By default items are laid out per their source order. The order property
//      can be used to change the order in which they appear in the container.
//  ---------------------------------------------------------------------------
.flex-order(@values) {   
    -webkit-order: @values;  
            order: @values;
}

//  --  JUSTIFY CONTENT
//      The default value for this is "flex-start". This property allows you 
//      to change how child items within a parent are positioned.
//  ---------------------------------------------------------------------------
.flex-justify(@values) {   
    -webkit-justify-content: @values;  
            justify-content: @values;
}

//  --  FLEX FLOW
//      This is another shorthand property for flex-direction and flex-wrap.
//      Default value is "row nowrap".
//  ---------------------------------------------------------------------------
.flex-flow(@values: row nowrap) {   
    -webkit-flex-flow: @values;  
            flex-flow: @values;
}